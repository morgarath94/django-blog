Index: mysite/blogging/templates/blogging/detail.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/blogging/templates/blogging/detail.html b/mysite/blogging/templates/blogging/detail.html
new file mode 100644
--- /dev/null	(date 1733522479083)
+++ b/mysite/blogging/templates/blogging/detail.html	(date 1733522479083)
@@ -0,0 +1,17 @@
+{% extends "base.html" %}
+{% block content %}
+<h2>{{ object }}</h2>
+<div class="post">
+    <p class="byline">
+        Posted by {{ object.author.username }} &mdash; {{ object.published_date }}
+    </p>
+    <div class="post-body">
+        {{ object.text }}
+    </div>
+    <ul class="categories">
+        {% for category in post.categories.all %}
+            <li>{{ category }}</li>
+        {% endfor %}
+    </ul>
+</div>
+{% endblock %}
\ No newline at end of file
Index: mysite/blogging/apps.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/blogging/apps.py b/mysite/blogging/apps.py
new file mode 100644
--- /dev/null	(date 1733522479079)
+++ b/mysite/blogging/apps.py	(date 1733522479079)
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class BloggingConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'blogging'
Index: mysite/blogging/static/django_blog.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/blogging/static/django_blog.css b/mysite/blogging/static/django_blog.css
new file mode 100644
--- /dev/null	(date 1733522479082)
+++ b/mysite/blogging/static/django_blog.css	(date 1733522479082)
@@ -0,0 +1,74 @@
+body {
+    background-color: #eee;
+    color: #111;
+    font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;
+    margin:0;
+    padding:0;
+}
+#container {
+    margin:0;
+    padding:0;
+    margin-top: 0px;
+}
+#header {
+    background-color: #333;
+    border-botton: 1px solid #111;
+    margin:0;
+    padding:0;
+}
+#control-bar {
+    margin: 0em 0em 1em;
+    list-style: none;
+    list-style-type: none;
+    text-align: right;
+    color: #eee;
+    font-size: 80%;
+    padding-bottom: 0.4em;
+}
+#control-bar li {
+    display: inline-block;
+}
+#control-bar li a {
+    color: #eee;
+    padding: 0.5em;
+    text-decoration: none;
+}
+#control-bar li a:hover {
+    color: #cce;
+}
+#content {
+    margin: 0em 1em 1em;
+}
+
+ul#entries {
+    list-style: none;
+    list-style-type: none;
+}
+div.entry {
+    margin-right: 2em;
+    margin-top: 1em;
+    border-top: 1px solid #cecece;
+}
+ul#entries li:first-child div.entry {
+    border-top: none;
+    margin-top: 0em;
+}
+div.entry-body {
+    margin-left: 2em;
+}
+.notification {
+    float: right;
+    text-align: center;
+    width: 25%;
+    padding: 1em;
+}
+.info {
+    background-color: #aae;
+}
+ul.categories {
+    list-style: none;
+    list-style-type: none;
+}
+ul.categories li {
+    display: inline;
+}
Index: mysite/blogging/migrations/0002_category.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/blogging/migrations/0002_category.py b/mysite/blogging/migrations/0002_category.py
new file mode 100644
--- /dev/null	(date 1733522479081)
+++ b/mysite/blogging/migrations/0002_category.py	(date 1733522479081)
@@ -0,0 +1,22 @@
+# Generated by Django 5.1.3 on 2024-11-18 21:11
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('blogging', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Category',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=128)),
+                ('description', models.TextField(blank=True)),
+                ('posts', models.ManyToManyField(blank=True, related_name='categories', to='blogging.post')),
+            ],
+        ),
+    ]
Index: mysite/blogging/migrations/0001_initial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/blogging/migrations/0001_initial.py b/mysite/blogging/migrations/0001_initial.py
new file mode 100644
--- /dev/null	(date 1733522479080)
+++ b/mysite/blogging/migrations/0001_initial.py	(date 1733522479080)
@@ -0,0 +1,29 @@
+# Generated by Django 5.1.3 on 2024-11-11 22:12
+
+import django.db.models.deletion
+from django.conf import settings
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Post',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=128)),
+                ('text', models.TextField(blank=True)),
+                ('created_date', models.DateTimeField(auto_now_add=True)),
+                ('modified_date', models.DateTimeField(auto_now=True)),
+                ('published_date', models.DateTimeField(blank=True, null=True)),
+                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
+            ],
+        ),
+    ]
Index: mysite/blogging/templates/blogging/list.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/blogging/templates/blogging/list.html b/mysite/blogging/templates/blogging/list.html
new file mode 100644
--- /dev/null	(date 1733522479083)
+++ b/mysite/blogging/templates/blogging/list.html	(date 1733522479083)
@@ -0,0 +1,19 @@
+{% extends "base.html" %}
+{% block content %}
+<h1>Recent Posts</h1>
+{% for post in post_list %}
+    <div class="post">
+        <h2>
+            <a href="{% url 'blog_detail' post.pk %}">{{ post }}</a>
+        </h2>
+        <p class="byline">
+            Posted by {{ post.author.username }} &mdash; {{ post.published_date }}
+        </p>
+        <ul class="categories">
+            {% for category in post.categories.all %}
+                <li>{{ category }}</li>
+            {% endfor %}
+        </ul>
+    </div>
+{% endfor %}
+{% endblock %}
\ No newline at end of file
Index: mysite/blogging/fixtures/blogging_test_fixture.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/blogging/fixtures/blogging_test_fixture.json b/mysite/blogging/fixtures/blogging_test_fixture.json
new file mode 100644
--- /dev/null	(date 1733522479080)
+++ b/mysite/blogging/fixtures/blogging_test_fixture.json	(date 1733522479080)
@@ -0,0 +1,38 @@
+[
+    {
+        "pk": 1, 
+        "model": "auth.user", 
+        "fields": {
+            "username": "admin", 
+            "first_name": "Mr.", 
+            "last_name": "Administrator", 
+            "is_active": true, 
+            "is_superuser": true, 
+            "is_staff": true, 
+            "last_login": "2013-05-24T05:35:58.628Z", 
+            "groups": [], 
+            "user_permissions": [], 
+            "password": "pbkdf2_sha256$10000$1rQazFNdOfFt$6aw/uIrv2uASkZ7moXMTajSN+ySYuowBnbP6ILNQntE=", 
+            "email": "admin@example.com", 
+            "date_joined": "2013-05-24T05:35:58.628Z"
+        }
+    },
+    {
+        "pk": 2,
+        "model": "auth.user", 
+        "fields": {
+            "username": "noname", 
+            "first_name": "", 
+            "last_name": "", 
+            "is_active": true, 
+            "is_superuser": true, 
+            "is_staff": true, 
+            "last_login": "2013-05-24T05:35:58.628Z", 
+            "groups": [], 
+            "user_permissions": [], 
+            "password": "pbkdf2_sha256$10000$1rQazFNdOfFt$6aw/uIrv2uASkZ7moXMTajSN+ySYuowBnbP6ILNQntE=", 
+            "email": "noname@example.com", 
+            "date_joined": "2013-05-24T05:35:58.628Z"
+        }
+    }
+]
Index: mysite/polling/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/polling/admin.py b/mysite/polling/admin.py
new file mode 100644
--- /dev/null	(date 1733522479088)
+++ b/mysite/polling/admin.py	(date 1733522479088)
@@ -0,0 +1,7 @@
+from django.contrib import admin
+
+# Register your models here.
+
+from polling.models import Poll
+
+admin.site.register(Poll)
Index: mysite/polling/tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/polling/tests.py b/mysite/polling/tests.py
new file mode 100644
--- /dev/null	(date 1733522479093)
+++ b/mysite/polling/tests.py	(date 1733522479093)
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
Index: mysite/blogging/migrations/0003_alter_category_options.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/blogging/migrations/0003_alter_category_options.py b/mysite/blogging/migrations/0003_alter_category_options.py
new file mode 100644
--- /dev/null	(date 1733522479081)
+++ b/mysite/blogging/migrations/0003_alter_category_options.py	(date 1733522479081)
@@ -0,0 +1,17 @@
+# Generated by Django 5.1.3 on 2024-11-18 21:15
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('blogging', '0002_category'),
+    ]
+
+    operations = [
+        migrations.AlterModelOptions(
+            name='category',
+            options={'verbose_name_plural': 'Categories'},
+        ),
+    ]
Index: mysite/polling/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/polling/urls.py b/mysite/polling/urls.py
new file mode 100644
--- /dev/null	(date 1733522479093)
+++ b/mysite/polling/urls.py	(date 1733522479093)
@@ -0,0 +1,7 @@
+from django.urls import path
+from polling.views import PollListView, PollDetailView
+
+urlpatterns = [
+    path('', PollListView.as_view(), name='poll_index'),
+    path('polls/<int:pk>', PollDetailView.as_view(), name='poll_detail'),
+]
\ No newline at end of file
Index: mysite/polling/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/polling/views.py b/mysite/polling/views.py
new file mode 100644
--- /dev/null	(date 1733522479094)
+++ b/mysite/polling/views.py	(date 1733522479094)
@@ -0,0 +1,29 @@
+from django.shortcuts import render
+from django.views.generic.list import ListView
+from django.views.generic.detail import DetailView
+
+# Create your views here.
+from django.http import Http404
+from polling.models import Poll
+
+
+class PollListView(ListView):
+    model = Poll
+    template_name = 'polling/list.html'
+
+
+class PollDetailView(DetailView):
+    model = Poll
+    template_name = 'polling/detail.html'
+
+    def post(self, request, *args, **kwargs):
+        poll = self.get_object()
+
+        if request.POST.get('vote') == 'Yes':
+            poll.score += 1
+        else:
+            poll.score -= 1
+        poll.save()
+
+        context = {'object': poll}
+        return render(request, 'polling/detail.html', context)
Index: mysite/polling/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/polling/models.py b/mysite/polling/models.py
new file mode 100644
--- /dev/null	(date 1733522479090)
+++ b/mysite/polling/models.py	(date 1733522479090)
@@ -0,0 +1,12 @@
+from django.db import models
+
+# Create your models here.
+
+
+class Poll(models.Model):
+    title = models.CharField(max_length=128)
+    text = models.TextField(blank=True)
+    score = models.IntegerField(default=0)
+
+    def __str__(self):
+        return self.title
Index: mysite/polling/templates/polling/detail.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/polling/templates/polling/detail.html b/mysite/polling/templates/polling/detail.html
new file mode 100644
--- /dev/null	(date 1733522479092)
+++ b/mysite/polling/templates/polling/detail.html	(date 1733522479092)
@@ -0,0 +1,17 @@
+{% extends "base.html" %}
+{% block content %}
+<h1>{{ object.title }}</h1>
+<div class="poll-body">
+    {{ object.text }}
+</div>
+<div class="poll_score">
+    Current Score: {{ object.score }}
+</div>
+<div class="poll-vote">
+    <form method="POST">
+        {% csrf_token %}
+        <input type="submit" name="vote" value="Yes">
+        <input type="submit" name="vote" value="No">
+    </form>
+</div>
+{% endblock %}
\ No newline at end of file
Index: mysite/polling/apps.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/polling/apps.py b/mysite/polling/apps.py
new file mode 100644
--- /dev/null	(date 1733522479089)
+++ b/mysite/polling/apps.py	(date 1733522479089)
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class PollingConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'polling'
Index: mysite/polling/migrations/0002_rename_content_poll_text.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/polling/migrations/0002_rename_content_poll_text.py b/mysite/polling/migrations/0002_rename_content_poll_text.py
new file mode 100644
--- /dev/null	(date 1733522479090)
+++ b/mysite/polling/migrations/0002_rename_content_poll_text.py	(date 1733522479090)
@@ -0,0 +1,18 @@
+# Generated by Django 5.1.3 on 2024-11-11 20:51
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('polling', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.RenameField(
+            model_name='poll',
+            old_name='content',
+            new_name='text',
+        ),
+    ]
Index: mysite/polling/templates/polling/list.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/polling/templates/polling/list.html b/mysite/polling/templates/polling/list.html
new file mode 100644
--- /dev/null	(date 1733522479092)
+++ b/mysite/polling/templates/polling/list.html	(date 1733522479092)
@@ -0,0 +1,11 @@
+{% extends "base.html" %}
+{% block content %}
+<h1>Polls</h1>
+{% for poll in poll_list %}
+    <div class="poll">
+        <h2>
+            <a href="{% url 'poll_detail' poll.pk %}">{{ poll.title }}</a>
+        </h2>
+    </div>
+{% endfor %}
+{% endblock %}
Index: mysite/polling/migrations/0001_initial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/polling/migrations/0001_initial.py b/mysite/polling/migrations/0001_initial.py
new file mode 100644
--- /dev/null	(date 1733522479089)
+++ b/mysite/polling/migrations/0001_initial.py	(date 1733522479089)
@@ -0,0 +1,23 @@
+# Generated by Django 5.1.3 on 2024-11-11 19:02
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Poll',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=128)),
+                ('content', models.TextField(blank=True)),
+                ('score', models.IntegerField(default=0)),
+            ],
+        ),
+    ]
Index: mysite/mysite/asgi.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/mysite/asgi.py b/mysite/mysite/asgi.py
new file mode 100644
--- /dev/null	(date 1733522479086)
+++ b/mysite/mysite/asgi.py	(date 1733522479086)
@@ -0,0 +1,16 @@
+"""
+ASGI config for mysite project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')
+
+application = get_asgi_application()
Index: mysite/mysite/wsgi.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/mysite/wsgi.py b/mysite/mysite/wsgi.py
new file mode 100644
--- /dev/null	(date 1733522479088)
+++ b/mysite/mysite/wsgi.py	(date 1733522479088)
@@ -0,0 +1,16 @@
+"""
+WSGI config for mysite project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')
+
+application = get_wsgi_application()
Index: mysite/manage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/manage.py b/mysite/manage.py
new file mode 100644
--- /dev/null	(date 1733522479085)
+++ b/mysite/manage.py	(date 1733522479085)
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
Index: mysite/mysite/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/mysite/settings.py b/mysite/mysite/settings.py
new file mode 100644
--- /dev/null	(date 1733522479086)
+++ b/mysite/mysite/settings.py	(date 1733522479086)
@@ -0,0 +1,125 @@
+"""
+Django settings for mysite project.
+
+Generated by 'django-admin startproject' using Django 5.1.3.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/5.1/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/5.1/ref/settings/
+"""
+import os
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'django-insecure-wlx_#0wu9%6anexfk5hw-3yz1qp7chu2&h&ztedith=%w72=0$'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'polling',
+    'blogging',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'mysite.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [os.path.join(BASE_DIR, 'mysite/templates')],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'mysite.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/5.1/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/5.1/howto/static-files/
+
+STATIC_URL = 'static/'
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
Index: mysite/mysite/templates/base.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/mysite/templates/base.html b/mysite/mysite/templates/base.html
new file mode 100644
--- /dev/null	(date 1733522479087)
+++ b/mysite/mysite/templates/base.html	(date 1733522479087)
@@ -0,0 +1,37 @@
+{% load static %}
+<!DOCTYPE html>
+<html lang="en">
+    <head>
+       <title>Django Blog</title>
+        <link type="text/css" rel="stylesheet" href="{% static 'django_blog.css' %}">
+    </head>
+    <body>
+        <div id="header">
+            <ul id="control-bar">
+                {% if user.is_authenticated %}
+                    {% if user.is_staff %}
+                        <li>
+                            <a href="{% url 'admin:index' %}">admin</a>
+                        </li>
+                    {% endif %}
+                    <li>
+                        <form id="frm_logout" method="post" action="{% url 'logout' %}">
+                            {% csrf_token %}
+                            <a href="javascript:$('#frm_logout').submit();">logout</a>
+                        </form>
+                    </li>
+                {% else %}
+                    <li>
+                        <a href="{% url 'login' %}">login</a>
+                    </li>
+                {% endif %}
+            </ul>
+        </div>
+        <div id="container">
+            {% block content %}
+            [content will go here]
+            {% endblock %}
+        </div>
+        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
+    </body>
+</html>
\ No newline at end of file
Index: mysite/mysite/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/mysite/urls.py b/mysite/mysite/urls.py
new file mode 100644
--- /dev/null	(date 1733522479087)
+++ b/mysite/mysite/urls.py	(date 1733522479087)
@@ -0,0 +1,28 @@
+"""
+URL configuration for mysite project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/5.1/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import include, path
+from django.contrib.auth.views import LoginView, LogoutView
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+    path('', include('blogging.urls')),
+    path('polling/', include('polling.urls')),
+    path('blogging/', include('blogging.urls')),
+    path('login/', LoginView.as_view(template_name='login.html', next_page='/'), name='login'),
+    path('logout/', LogoutView.as_view(next_page='/'), name='logout'),
+]
Index: mysite/mysite/templates/login.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/mysite/templates/login.html b/mysite/mysite/templates/login.html
new file mode 100644
--- /dev/null	(date 1733522479087)
+++ b/mysite/mysite/templates/login.html	(date 1733522479087)
@@ -0,0 +1,8 @@
+{% extends "base.html" %}
+{% block content %}
+<h1>My Blog Login</h1>
+<form action="" method="POST">{% csrf_token %}
+    {{ form.as_p }}
+    <p><input type="submit" value="Log In"></p>
+</form>
+{% endblock %}
\ No newline at end of file
Index: .idea/django-blog.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module version=\"4\">\r\n  <component name=\"PyDocumentationSettings\">\r\n    <option name=\"format\" value=\"PLAIN\" />\r\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/django-blog.iml b/.idea/django-blog.iml
--- a/.idea/django-blog.iml	(revision af5609a5d6ef36b936ddf12902cb58750ac40da9)
+++ b/.idea/django-blog.iml	(date 1733522546705)
@@ -1,7 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<module version="4">
-  <component name="PyDocumentationSettings">
-    <option name="format" value="PLAIN" />
-    <option name="myDocStringFormat" value="Plain" />
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/.venv" />
+    </content>
+    <orderEntry type="jdk" jdkName="Python 3.12 (django-blog) (2)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/requirements.txt b/requirements.txt
new file mode 100644
--- /dev/null	(date 1733522479094)
+++ b/requirements.txt	(date 1733522479094)
@@ -0,0 +1,1 @@
+Django
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1733522479078)
+++ b/.idea/modules.xml	(date 1733522479078)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/django-blog.iml" filepath="$PROJECT_DIR$/.idea/django-blog.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.12 (django-blog) (2)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision af5609a5d6ef36b936ddf12902cb58750ac40da9)
+++ b/.idea/misc.xml	(date 1733522859857)
@@ -1,4 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12 (django-blog) (2)" project-jdk-type="Python SDK" />
+  <component name="Black">
+    <option name="sdkName" value="Python 3.12 (django-blog)" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12 (django-blog) (4)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: mysite/blogging/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/blogging/admin.py b/mysite/blogging/admin.py
new file mode 100644
--- /dev/null	(date 1733522479079)
+++ b/mysite/blogging/admin.py	(date 1733522479079)
@@ -0,0 +1,19 @@
+from django.contrib import admin
+
+# Register your models here.
+
+from blogging.models import Post, Category
+
+
+class CategoryInline(admin.TabularInline):
+    model = Category.posts.through
+
+
+@admin.register(Post)
+class PostAdmin(admin.ModelAdmin):
+    inlines = [CategoryInline,]
+
+
+@admin.register(Category)
+class CategoryAdmin(admin.ModelAdmin):
+    exclude = ('posts',)
Index: mysite/blogging/tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/blogging/tests.py b/mysite/blogging/tests.py
new file mode 100644
--- /dev/null	(date 1733522479084)
+++ b/mysite/blogging/tests.py	(date 1733522479084)
@@ -0,0 +1,65 @@
+from django.test import TestCase
+
+# Create your tests here.
+
+from django.contrib.auth.models import User
+import datetime
+from blogging.models import Post, Category
+
+
+class PostTest(TestCase):
+    fixtures = ['blogging_test_fixture.json',]
+
+    def setUp(self):
+        self.user = User.objects.get(pk=1)
+
+    def test_string_representation(self):
+        expected = 'This is a blog title'
+        p1 = Post(title=expected)
+        actual = str(p1)
+        self.assertEqual(actual, expected)
+
+
+class CategoryTestCase(TestCase):
+    def test_string_representation(self):
+        expected = 'A category'
+        category1 = Category(name=expected)
+        actual = str(category1)
+        self.assertEqual(actual, expected)
+
+
+class FrontEndTestCase(TestCase):
+    fixtures = ['blogging_test_fixture.json',]
+
+    def setUp(self):
+        self.now = datetime.datetime.now()
+        self.timedelta = datetime.timedelta(15)
+        author = User.objects.get(pk=1)
+        for count in range(1, 11):
+            post = Post(title=f'Post {count} Title', text=f'Post {count} Text', author=author)
+            if count < 6:
+                pubdate = self.now - self.timedelta * count
+                post.published_date = pubdate
+            post.save()
+
+    def test_list_only_published(self):
+        resp = self.client.get('/blogging')
+        resp_text = resp.content.decode(resp.charset)
+        self.assertContains('Recent Posts', resp_text)
+        for count in range(1, 11):
+            title = f'Post {count} Title'
+            if count < 6:
+                self.assertContains(resp, title, count=1)
+            else:
+                self.assertNotContains(resp, title)
+
+    def test_details_only_published(self):
+        for count in range(1, 11):
+            title = f'Post {count} Title'
+            post = Post(title=title)
+            resp = self.client.get(f'/posts/{post.pk}')
+            if count < 6:
+                self.assertEqual(resp.status_code, 200)
+                self.assertContains(resp, title)
+            else:
+                self.assertEqual(resp.status_code, 404)
Index: mysite/blogging/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/blogging/views.py b/mysite/blogging/views.py
new file mode 100644
--- /dev/null	(date 1733522479085)
+++ b/mysite/blogging/views.py	(date 1733522479085)
@@ -0,0 +1,31 @@
+from django.shortcuts import render
+from django.views.generic.list import ListView
+from django.views.generic.detail import DetailView
+
+# Create your views here.
+from django.http.response import HttpResponse, Http404
+from django.template import loader
+from blogging.models import Post
+
+
+def stub_view(request, *args, **kwargs):
+    body = 'Stub View\n\n'
+    if args:
+        body += ('Args: \n')
+        body += '\n'.join(['\t%s' % a for a in args])
+    if kwargs:
+        body += ('Kwargs: \n')
+        body += '\n'.join(['t%s: %s' % k for k in kwargs])
+    return HttpResponse(body, content_type='text/plain')
+
+
+class PostListView(ListView):
+    model = Post
+    queryset = Post.objects.exclude(published_date__exact=None).order_by('-published_date')
+    template_name = 'blogging/list.html'
+
+
+class PostDetailView(DetailView):
+    model = Post
+    queryset = Post.objects.exclude(published_date__exact=None)
+    template_name = 'blogging/detail.html'
Index: mysite/blogging/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/blogging/models.py b/mysite/blogging/models.py
new file mode 100644
--- /dev/null	(date 1733522479082)
+++ b/mysite/blogging/models.py	(date 1733522479082)
@@ -0,0 +1,28 @@
+from django.db import models
+from django.contrib.auth.models import User
+
+# Create your models here.
+
+
+class Post(models.Model):
+    title = models.CharField(max_length=128)
+    text = models.TextField(blank=True)
+    author = models.ForeignKey(User, on_delete=models.CASCADE)
+    created_date = models.DateTimeField(auto_now_add=True)
+    modified_date = models.DateTimeField(auto_now=True)
+    published_date = models.DateTimeField(blank=True, null=True)
+
+    def __str__(self):
+        return self.title
+
+
+class Category(models.Model):
+    name = models.CharField(max_length=128)
+    description = models.TextField(blank=True)
+    posts = models.ManyToManyField(Post, blank=True, related_name='categories')
+
+    def __str__(self):
+        return self.name
+
+    class Meta:
+        verbose_name_plural = 'Categories'
Index: mysite/blogging/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysite/blogging/urls.py b/mysite/blogging/urls.py
new file mode 100644
--- /dev/null	(date 1733522479084)
+++ b/mysite/blogging/urls.py	(date 1733522479084)
@@ -0,0 +1,5 @@
+from django.urls import path
+from blogging.views import stub_view, PostListView, PostDetailView
+
+urlpatterns = [path("", PostListView.as_view(), name="blog_index"),
+               path('posts/<int:pk>', PostDetailView.as_view(), name='blog_detail')]
diff --git a/mysite/blogging/migrations/__init__.py b/mysite/blogging/migrations/__init__.py
new file mode 100644
diff --git a/mysite/polling/__init__.py b/mysite/polling/__init__.py
new file mode 100644
diff --git a/mysite/polling/migrations/__init__.py b/mysite/polling/migrations/__init__.py
new file mode 100644
diff --git a/mysite/mysite/__init__.py b/mysite/mysite/__init__.py
new file mode 100644
diff --git a/mysite/blogging/__init__.py b/mysite/blogging/__init__.py
new file mode 100644
